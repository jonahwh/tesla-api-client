apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'


group = 'com.github.jonahwh'
archivesBaseName = 'tesla-api-client'
version = '1.16'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

repositories {
    jcenter()
}


if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided 'javax.annotation:jsr250-api:1.0'
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

} else {

    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7

    install {
        repositories.mavenInstaller {
            pom.artifactId = 'tesla-api-client'
        }
    }

    task execute(type:JavaExec) {
       main = System.getProperty('mainClass')
       classpath = sourceSets.main.runtimeClasspath
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'Tesla API Client'
                    packaging 'jar'
                    description 'Unofficial Tesla Owner Java API Client'
                    url 'https://github.com/jonahwh/tesla-api-client'

                    scm {
                        connection 'scm:git:git://github.com/jonahwh/tesla-api-client.git'
                        developerConnection 'scm:git:ssh://github.com:jonahwh/tesla-api-client.git'
                        url 'http://github.com/jonahwh/tesla-api-client/tree/master'
                    }

                    licenses {
                        license {
                            name 'Unlicense'
                            url 'http://unlicense.org'
                        }
                    }

                    developers {
                        developer {
                            id 'jonahwh'
                            name 'Jonah Hirsch'
                            email 'jonahwh@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

ext {
    oltu_version = "1.0.1"
    retrofit_version = "2.3.0"
    swagger_annotations_version = "1.5.15"
    junit_version = "4.12"
    threetenbp_version = "1.3.5"
    json_fire_version = "1.8.0"
}

dependencies {
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile "org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:$oltu_version"
    compile "io.gsonfire:gson-fire:$json_fire_version"
    compile "org.threeten:threetenbp:$threetenbp_version"

    testCompile "junit:junit:$junit_version"
}
